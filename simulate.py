import numpy as np
import pandas as pd
import random
from scipy.io import loadmat


def sample_Bernouli(theta = .5, n_samples = 1):
    """
    Generating samples at random from Bernouli density funtion
    """
    return (np.random.rand(n_samples) <= theta).astype(int)
def shuffle_Binomial():
    """Shuffling bionomial number"""
    data_bionom = np.concatenate([np.ones(21), np.zeros(21)]).astype(int)
    np.random.shuffle(data_bionom)
    
    return data_bionom

def shuffle_Amt(run = 1):
    idx = np.linspace(1, 84, 84).astype(int)
    amt = np.round(np.linspace(1,100,84)).astype(int)
    if run == 1:
        amt_output = amt[idx%2 == 1]
        np.random.shuffle(amt_output)
    elif run == 2:
        amt_output = amt[idx%2 == 0]
        np.random.shuffle(amt_output)
    else:
        amt_output = -1
        
    return amt_output

def genertae_task_act_stim(isActFirst = True):
    """
    This function performs the task desgin for Action an Stimulus Values learning
    as Probabilistic Reiforcement Learning task to test the relative contribution of
    Action and Rewarding mechanisms of Dopemiergic system in Parkinson disease.
    The experimental task design was predefined and stored in .mat files. Also, it is the same for all participants.
    There are two .m files, first is related to Action value learnig, when it is presented at the begining.
                            another is related to Stimulus value leanring, when it is presented at the begining.
    
    Arguments
    ----------
    firstAct: bool
        True if the task starts with with Action-value, False if the task sarts with Stimulus-value learning
        
    Output
    -------
    data : pandas.DataFrame
        Columns contains:'session',
                         'run',
                         'block',
                         'trialNumber',
                         'yellowOnLeftSide',
                         'leftCanBePushed',
                         'winAmtLeft',
                         'winAmtRight',
                         'winAmtYellow',the amount of feedback when participant selected yellow color correcly, between  [0, 100]
                         'winAmtBlue',
                         'winAmtPushable',
                         'winAmtPullable',
                         'pushCorrect': 1 if participant pushed and 0 if participant pulled 
                         'yellowCorrect':1 if participant chose yellow color and 0 if participant chose blue color
    """   

    
           
    # The oputpu dataframe for task design generated by computer

    # Two sessions, each session contains two runs
    session = np.concatenate([np.repeat(1, 4*42), # session 1
                              np.repeat(2, 4*42)]) # session 2

    # Four runs, each run contains two blocks (conditions)
    run = np.concatenate([np.repeat(1, 2*42), #The session 1 and run 1
                          np.repeat(2, 2*42), #The session 1 and run 2
                          np.repeat(1, 2*42), #The session 2 and run 1
                          np.repeat(2, 2*42)]) #The session 2 and run 2

    # the number of trials for eigh conditions, each condition (Action value or Stimulus Value) includes 42 trials
    trialNumber = np.arange(1, 8*42 + 1)

    # counterbalanced ledft and right stimulus response            
    yellowOnLeftSide = np.concatenate([shuffle_Binomial(), shuffle_Binomial(),
                                       shuffle_Binomial(), shuffle_Binomial(),
                                       shuffle_Binomial(), shuffle_Binomial(),
                                       shuffle_Binomial(), shuffle_Binomial()])   

    # counterbalanced ledft and right action response
    leftCanBePushed = np.concatenate([shuffle_Binomial(), shuffle_Binomial(), # Session 1 and Run 1
                                      shuffle_Binomial(), shuffle_Binomial(), # Session 1 and Run 2
                                      shuffle_Binomial(), shuffle_Binomial(), # Session 2 and Run 1
                                      shuffle_Binomial(), shuffle_Binomial()]) # Session 2 and Run 2
    # Alternative function sample_bernouli(theta = .5, n_samples = 42)


    # winning reward for left side
    winAmtLeft = np.concatenate([shuffle_Amt(run = 1), shuffle_Amt(run = 1), # Session 1 and Run 1
                                 shuffle_Amt(run = 2), shuffle_Amt(run = 2), # Session 1 and Run 2
                                 shuffle_Amt(run = 1), shuffle_Amt(run = 1), # Session 2 and Run 1
                                 shuffle_Amt(run = 2), shuffle_Amt(run = 2)]) # Session 2 and Run 2
    # winning reward for right side
    winAmtRight = 100 - winAmtLeft  

    # winning amounts for pulled respose
    winAmtYellow = yellowOnLeftSide*winAmtLeft + (1 - yellowOnLeftSide)*winAmtRight
    winAmtBlue = 100 - winAmtYellow       

    # winning amounts for pushed respose
    winAmtPushable = leftCanBePushed*winAmtLeft + (1 - leftCanBePushed)*winAmtRight
    winAmtPullable = 100 - winAmtPushable

            
    # Announce choice correct for push and Yellow
    pushCorrect = np.zeros(8*42).astype(int)
    yellowCorrect = np.zeros(8*42).astype(int)
    
    for ses in range(2):
        """Two sessions applying altertative Action first and Stimlus first from predefined .m files"""
        if isActFirst:
            """The action value learning is the first condition"""
            data = loadmat('../data/ExpStruct_ActFirst_winOnly.mat')  
            # If Action is first for the current participant
            if ses==0:
                # Each block is Action value or Stimulus Value condition
                block = np.concatenate([np.repeat('Act', 42),  np.repeat('Stim', 42),
                                        np.repeat('Stim', 42), np.repeat('Act', 42),
                                        np.repeat('Stim', 42), np.repeat('Act', 42),
                                        np.repeat('Act', 42), np.repeat('Stim', 42)])
                stimActFirst = np.repeat('Act', 8*42)
                
            
            # predefined pushed correct responce
            pushCorrect[ses*4*42:(ses+1)*4*42] = np.concatenate([data['triallist1_1'][0], # The condition 1 and run 1
                                                                 shuffle_Binomial(), # The condition 1 and run 2
                                                                 shuffle_Binomial(),  # The condition 2 and run 1
                                                                 data['triallist2_2'][0]]) # The condition 2 and run 2
            # predefined Yellow correct responce
            yellowCorrect[ses*4*42:(ses+1)*4*42] = np.concatenate([shuffle_Binomial(), # The condition 1 and run 1
                                                                   data['triallist1_2'][0], # The condition 1 and run 2
                                                                   data['triallist2_1'][0],# The condition 2 and run 1
                                                                   shuffle_Binomial()]) # The condition 2 and run 2                    
            isActFirst = False

        else:
            """The stimulus value learning is the first condition"""
            data = loadmat('../data/ExpStruct_StimFirst_winOnly.mat')
            
            # If Stimulus is first for the current participant
            if ses==0:
                # Each block is Action value or Stimulus Value condition
                block = np.concatenate([np.repeat('Stim', 42),  np.repeat('Act', 42),
                                        np.repeat('Act', 42), np.repeat('Stim', 42),
                                        np.repeat('Act', 42), np.repeat('Stim', 42),
                                        np.repeat('Stim', 42), np.repeat('Act', 42)])
                stimActFirst = np.repeat('Stim', 8*42)
                
            pushCorrect[ses*4*42:(ses+1)*4*42] = np.concatenate([data['triallist1_1'][0], # The condition 1 and run 1
                                                                shuffle_Binomial(), # The condition 1 and run 2
                                                                  shuffle_Binomial(),  # The condition 2 and run 1
                                                                  data['triallist2_2'][0]]) # The condition 2 and run 2
            # predefined Yellow correct responce
            yellowCorrect[ses*4*42:(ses+1)*4*42] = np.concatenate([shuffle_Binomial(), # The condition 1 and run 1
                                                                data['triallist1_2'][0], # The condition 1 and run 2
                                                                data['triallist2_1'][0],# The condition 2 and run 1
                                                                shuffle_Binomial()]) # The condition 2 and run 2 
            
            isActFirst = True
        
        # Dictionary of task desing generated by computer
        dataAct = ({'session':session,
                    'run':run,
                    'block':block,
                     'stimActFirst':stimActFirst,
                    'trialNumber':trialNumber,
                    'yellowOnLeftSide':yellowOnLeftSide,
                    'leftCanBePushed':leftCanBePushed,
                    'winAmtLeft':winAmtLeft,
                    'winAmtRight':winAmtRight,
                    'winAmtYellow':winAmtYellow,
                    'winAmtBlue':winAmtBlue,
                    'winAmtPushable':winAmtPushable,
                    'winAmtPullable':winAmtPullable,
                    'pushCorrect':pushCorrect,
                    'yellowCorrect':yellowCorrect})
        # Dataframe of output
        output = pd.DataFrame(dataAct)
     
    return output